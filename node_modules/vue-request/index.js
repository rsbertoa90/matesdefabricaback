(function () {

  const axios = require('axios')
  const pathToRegexp = require('path-to-regexp')
  const qs = require('qs')

  //create path compiler
  function compilePath (path, paramsObj) {
      return pathToRegexp.compile(path)(paramsObj)
  }
  //define vue-request
  const VueRequest = {}

  /**
   * Vue.use(VueRequest, {
   *  headers: {
   *    'Content-Type': 'application/x-www-form-urlencoded'
   *  }
   * })
   *
   * this.$http.get(someUrl, data, config) same as axios
   * @param  {[Object]} options [description]
   */
  VueRequest.install = function (Vue, options) {
    const instance = axios.create(options)

    instance.interceptors.request.use(function (config) {
      if (config.urlParams) {
        config.url = compilePath(config.url, config.urlParams)
      }

      //x-www-form-urlencoded
      if (config.headers['Content-Type'] && config.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') !== -1 && config.data) {
        config.data = qs.stringify(config.data, {encode: false})
      }

      //form data
      if (config.headers['Content-Type'] && config.headers['Content-Type'].indexOf('multipart/form-data') !== -1 && config.data) {
        const data = config.data
        const formData = new FormData()
        Object.keys(data).forEach((v,i) => {
          formData.append(v, data[v])
        })
        config.data = formData
      }

      return config
    })

    Vue.prototype.$http = instance
  }

  if (typeof exports == "object") {
    module.exports = VueRequest
  } else if (typeof define == "function" && define.amd) {
    define([], function(){ return VueRequest })
  } else if (typeof window !== 'undefined' && window.Vue) {
    Vue.use(VueRequest, options)
  }
})()
